services:
  proxy:
    container_name: fisio-rag-proxy
    image: traefik:v3.1
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "${TRAEFIK_DASHBOARD_PORT:-18080}:8080" # UI di Traefik (default host 18080 to avoid Windows reservations)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - fisio-rag-net

  api:
    container_name: fisio-rag-api
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
    env_file:
      - ./.env
    volumes:
      - ./apps/api/api:/app/api
      - ./apps/api/tests:/app/tests
      # Story 7.2: Model cache volume for sentence-transformers
      - model_cache:/app/.cache/torch/sentence_transformers
    environment:
      - PYTHONUNBUFFERED=1
      - CELERY_ENABLED=true
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      # Story 7.2: Feature flags (override in .env if needed)
      - ENABLE_CROSS_ENCODER_RERANKING=${ENABLE_CROSS_ENCODER_RERANKING:-false}
      - ENABLE_DYNAMIC_MATCH_COUNT=${ENABLE_DYNAMIC_MATCH_COUNT:-false}
      - ENABLE_CHUNK_DIVERSIFICATION=${ENABLE_CHUNK_DIVERSIFICATION:-false}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-router.rule=Host(`localhost`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api-router.priority=100" # Priorità alta
      - "traefik.http.routers.api-router.service=api-service" # Collega il router al servizio
      - "traefik.http.services.api-service.loadbalancer.server.port=8000"
      # Story 2.6.1: Dedicated /health router for monitoring visibility
      - "traefik.http.routers.api-health-router.rule=Host(`localhost`) && Path(`/health`)"
      - "traefik.http.routers.api-health-router.priority=150"
      - "traefik.http.routers.api-health-router.service=api-service"
      # Rate limiting per endpoint admin (Story 2.4)
      - "traefik.http.middlewares.api-admin-rl.ratelimit.average=30"
      - "traefik.http.middlewares.api-admin-rl.ratelimit.burst=10"
      - "traefik.http.middlewares.api-admin-rl.ratelimit.period=1m"
      - "traefik.http.routers.api-admin-rl-router.rule=Host(`localhost`) && PathPrefix(`/api/v1/admin/knowledge-base/sync-jobs`)"
      - "traefik.http.routers.api-admin-rl-router.priority=110"
      - "traefik.http.routers.api-admin-rl-router.service=api-service"
      - "traefik.http.routers.api-admin-rl-router.middlewares=api-admin-rl@docker"
    networks:
      - fisio-rag-net
    depends_on:
      - redis

  celery-worker:
    container_name: fisio-rag-celery-worker
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
    command: celery -A api.celery_app:celery_app worker --loglevel=INFO
    volumes:
      - ./apps/api/api:/app/api
      # Story 7.2: Model cache shared con api service
      - model_cache:/app/.cache/torch/sentence_transformers
    env_file:
      - ./.env
    environment:
      - PYTHONUNBUFFERED=1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      # Story 7.2: Feature flags (sync con api service)
      - ENABLE_CROSS_ENCODER_RERANKING=${ENABLE_CROSS_ENCODER_RERANKING:-false}
      - ENABLE_DYNAMIC_MATCH_COUNT=${ENABLE_DYNAMIC_MATCH_COUNT:-false}
      - ENABLE_CHUNK_DIVERSIFICATION=${ENABLE_CHUNK_DIVERSIFICATION:-false}
    networks:
      - fisio-rag-net
    depends_on:
      api:
        condition: service_healthy
      redis:
        condition: service_started

  redis:
    image: redis:alpine
    container_name: fisio-rag-redis
    # Story 2.6.1: Redis persistence configured for production
    # - AOF enabled for data durability
    # - Named volume prevents data loss on container restart
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - fisio-rag-net

  web:
    container_name: fisio-rag-web
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    volumes:
      - ./apps/web:/app
      # Nota: questo volume è utile solo con un dev-server (Vite). Con l'attuale Dockerfile basato su Nginx,
      # l'hot-reload non è attivo. Per sviluppo live, usare `docker compose -f docker-compose.dev.yml` con un Dockerfile dev.
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web-router.rule=Host(`localhost`)"
      - "traefik.http.routers.web-router.priority=1"
      - "traefik.http.routers.web-router.service=web-service" # Collega il router al servizio
      - "traefik.http.services.web-service.loadbalancer.server.port=80"
    networks:
      - fisio-rag-net

networks:
  fisio-rag-net:
    driver: bridge

volumes:
  redis_data:
    driver: local
  # Story 7.2: Persistent model cache for sentence-transformers
  # Prevents re-downloading cross-encoder model (~200MB) on container restart
  model_cache:
    driver: local
